#!/usr/bin/zsh

set -e

exec 2> >(while read line; do echo -e "\e[01;31m$line\e[0m"; done)

MY_GPG_KEY_ID="0x2653E033C3C07A2C"

script_name="$(basename "$0")"
dotfiles_dir="$(cd "$(dirname "$0")"; pwd)"
cd "$dotfiles_dir"

assign() {
  op="$1"
  if [[ "$op" != "link" && "$op" != "copy" ]]; then
    echo "Unknown operation: $op"
    exit 1
  fi

  orig_file="$2"
  dest_file="$3"

  mkdir -p "$(dirname "$orig_file")"
  mkdir -p "$(dirname "$dest_file")"

  rm -rf "$dest_file"

  if [[ "$op" == "link" ]]; then
    ln -s "$orig_file" "$dest_file"
    echo "$dest_file -> $orig_file"
  else
    cp -R "$orig_file" "$dest_file"
    echo "$dest_file <= $orig_file"
  fi
}

link() {
  assign "link" "$dotfiles_dir/$1" "$HOME/$1"
}

copy() {
  assign "copy" "$dotfiles_dir/$1" "/$1"
  [ -z "$2" ] || chmod "$2" "/$1"
}

is_chroot() {
  grep rootfs /proc/mounts >/dev/null
}

systemctl_enable_start() {
  if [ "$#" -eq 1 ]; then
    target="system"
    name="$1"
  else
    target="$1"
    name="$2"
  fi
  if [[ "$target" == "user" ]]; then
    echo "systemctl --user enable --now "$name""
    systemctl --user enable "$name"
    systemctl --user start  "$name"
  else
    echo "systemctl enable --now "$name""
    systemctl enable "$name"
    systemctl start  "$name"
  fi
}



if [ "$(whoami)" != "root" ]; then
  echo "======================================="
  echo "Setting up dotfiles for current user..."
  echo "======================================="

  link "bin"
  link ".config/user-dirs.dirs"
  link ".gnupg/gpg.conf"
  link ".gnupg/sks-keyservers.netCA.pem"
  link ".config/pulse/daemon.conf"
  link ".config/htop"
  link ".pandoc"
  link ".config/kak"
  link ".config/croc"
  link ".config/teiler"
  link ".config/nvim"
  link ".config/pacman"
  link ".config/rofi"
  link ".config/qalculate/qalc.cfg"
  link ".config/vifm/vifmrc"
  link ".config/imapnotify"
  link ".config/systemd/user/backup-packages.service"
  link ".config/systemd/user/backup-packages.timer"
  link ".config/tig"
  link ".config/vimiv"
  link ".gitconfig"
  link ".gitconfig.work"
  link ".mdlrc"
  link ".magic"
  link ".pylintrc"
  link ".tmux.conf"
  link ".zsh"
  link ".zshrc"
  link ".vmdrc"
  link ".gemrc"
  link ".visidatarc"
  link ".gnupg/gpg-agent.conf"
  link ".gnupg/pinentry-dmenu.conf"
  link ".config/chromium-flags.conf"
  link ".config/captive-browser.toml"
  link ".config/picom"
  link ".config/dunst"
  link ".config/gsimplecal"
  link ".config/gtk-3.0/settings.ini"
  link ".config/i3"
  link ".config/py3status"
  link ".config/kitty"
  link ".config/mimeapps.list"
  link ".config/msmtp"
  link ".config/mpv/config"
  link ".zprofile"
  link ".gitignore"
  link ".ignore"
  link ".xinitrc"
  link ".config/youtube-dl/config"
  link ".config/neomutt"
  link ".config/redshift"
  link ".config/repoctl"
  link ".config/transmission/settings.json"
  link ".config/USBGuard"
  link ".config/nnn/plugins"
  link ".config/khard"
  link ".config/khal"
  link ".mbsyncrc"
  link ".config/vdirsyncer"
  link ".config/firejail"
  link ".cheat"
  link ".wgetrc"
  link ".gitmessage"
  link ".config/PulseEffects"
  link ".config/systemd/user/tarsnap.timer"
  link ".config/systemd/user/tarsnap.service"
  link ".config/systemd/user/library-repos.service"
  link ".config/systemd/user/library-repos.timer"
  link ".config/systemd/user/restic.timer"
  link ".config/systemd/user/restic.service"
  link ".config/systemd/user/restic-check.service"
  link ".config/systemd/user/restic-check.timer"
  link ".config/systemd/user/checkmail.service"
  link ".config/systemd/user/checkmail.timer"
  link ".config/systemd/user/urlwatch.service"
  link ".config/systemd/user/urlwatch.timer"
  link ".config/udiskie"
  link ".config/qutebrowser"
  link ".config/firewarden"
  link ".local/share/rofi-json-dicts"
  link ".local/share/fonts/taskbar.ttf"
  link ".local/share/applications/neomutt.desktop"
  link ".local/share/applications/browser.desktop"
  link ".hidden"
  link ".gtkrc-2.0"
  link ".taskrc"
  link ".config/urlwatch"
  link ".xsession"
  link ".Xresources"
  link ".curlrc"
  link ".config/autorandr"
  link ".config/twitchy3/twitchy.cfg"

  echo ""
  echo "================================="
  echo "Enabling and starting services..."
  echo "================================="

  if is_chroot; then
    >&2 echo "=== Running in chroot, skipping user services..."
  else
      systemctl --user daemon-reload
      systemctl_enable_start "user" "backup-packages.timer"
      systemctl_enable_start "user" "dunst.service"
      systemctl_enable_start "user" "redshift.service"
      systemctl_enable_start "user" "urlwatch.timer"
      systemctl_enable_start "user" "yubikey-touch-detector.service"
  fi

  echo ""
  echo "======================================="
  echo "Finishing various user configuration..."
  echo "======================================="

  echo "Configuring MIME types"
  file --compile --magic-file ~/.magic

  if ! gpg -k | grep "$MY_GPG_KEY_ID" > /dev/null; then
    echo "Importing my public PGP key"
    curl -s https://levis.name/pgp_keys.asc| gpg --import
    gpg --trusted-key "$MY_GPG_KEY_ID" > /dev/null
  fi

  find ~/.gnupg -type f -exec chmod 600 {} \;
  find ~/.gnupg -type d -exec chmod 700 {} \;


  if is_chroot; then
    >&2 echo "=== Running in chroot, skipping YubiKey configuration..."
  else
      if [[ ! -a "$HOME/.config/Yubico/u2f_keys" ]]; then
        echo "Configuring YubiKey for sudo access (touch it now)"
        mkdir -p "$HOME/.config/Yubico"
        pamu2fcfg -ucyril > "$HOME/.config/Yubico/u2f_keys"
      fi
  fi

  if [[ -a "$HOME/.password-store" ]]; then
    echo "Configuring automatic git push for pass"
    echo "#!/usr/bin/zsh\n\npass git push" >! "$HOME/.password-store/.git/hooks/post-commit"
    chmod +x "$HOME/.password-store/.git/hooks/post-commit"
  fi

  echo "Configuring GTK file chooser dialog"
  gsettings set org.gtk.Settings.FileChooser sort-directories-first true

  echo "Ignoring further changes to often changing config"
  git update-index --assume-unchanged ".config/transmission/settings.json"

  echo ""
  echo "====================================="
  echo "Switching to root user to continue..."
  echo "====================================="
  echo "..."
  sudo -s "$dotfiles_dir/$script_name"
  exit
fi


if [[ "$(whoami)" == "root" ]]; then
  echo ""
  echo "=========================="
  echo "Setting up /etc configs..."
  echo "=========================="

  copy "etc/makepkg.conf"
  copy "etc/mkinitcpio.conf"
  copy "etc/systemd/resolved.conf"
  copy "etc/conf.d/snapper"
  copy "etc/iwd/main.conf"
  copy "etc/vnstat.conf"
  copy "etc/knot-resolver/kresd.conf"
  copy "etc/intel-undervolt.conf"
  copy "etc/environment"
  copy "etc/pacman.d/hooks"
  copy "etc/profile.d/zz_custom.sh"
  copy "etc/snap-pac.conf"
  copy "etc/snapper/configs/root"
  copy "etc/snapper/configs/config"
  copy "etc/ssh/ssh_config"
  copy "etc/sysctl.d/10-swappiness.conf"
  copy "etc/sysctl.d/51-tcp-ip-stack.conf"
  copy "etc/sysctl.d/99-idea.conf"
  copy "etc/sysctl.d/99-sysctl.conf"
  copy "etc/systemd/journald.conf"
  copy "etc/systemd/system/paccache.service"
  copy "etc/systemd/system/iwd.service"
  copy "etc/systemd/system/paccache.timer"
  copy "etc/systemd/system/reflector.service"
  copy "etc/systemd/system/reflector.timer"
  copy "usr/local/etc/tarsnapper.conf"
  copy "usr/local/bin/backitup"
  copy "etc/updatedb.conf"
  copy "etc/bluetooth/main.conf"
  copy "etc/pulseaudio/default.pa"
  copy "etc/parcimonie.sh.d/cyril.conf"
  copy "etc/snapper/configs/home"
  copy "etc/audit/auditd.conf"
  copy "etc/audit/audit.rules"
  copy "etc/modules-load.d/pkcs8.conf"
  copy "etc/modules-load.d/zram.conf"
  copy "etc/default/grub"
  copy "etc/default/tlp"
  copy "etc/default/grub-btrfs/config"
  copy "etc/nmtrust/trusted_units"
  copy "etc/systemd/system/getty@tty1.service.d"
  copy "etc/pacman.conf"
  copy "etc/pam.d/sudo"
  copy "etc/private-internet-access/pia.conf"
  copy "etc/sudoers"
  copy "etc/systemd/logind.conf"
  copy "etc/systemd/system/backup-repo@pkgbuild"
  copy "etc/systemd/system/backup-repo@.service"
  copy "etc/udev/rules.d/81-ac-battery-change.rules"
  copy "etc/udev/rules.d/70-wifi-powersave.rules"
  copy "etc/udev/rules.d/50-usb_power_save.rules"
  copy "etc/udev/rules.d/99pci_pm.rules"
  copy "etc/udev/rules.d/83-yubikey.rules"
  copy "etc/udev/rules.d/90-hid-eToken.rules"
  copy "etc/usbguard/usbguard-daemon.conf" 600
  copy "etc/X11/xorg.conf.d/00-keyboard.conf"
  copy "etc/X11/xorg.conf.d/30-touchpad.conf"
  copy "etc/NetworkManager/dispatcher.d/20freewifi"
  copy "etc/NetworkManager/dispatcher.d/100vpn"
  copy "etc/NetworkManager/dispatcher.d/99refresh-py3status"
  copy "etc/NetworkManager/conf.d"
  copy "etc/systemd/system/iwd.service.d/90-networkmanager.conf"
  mkdir -p "/etc/nmtrust" && copy "etc/nmtrust/trusted_units"

  echo ""
  echo "================================="
  echo "Enabling and starting services..."
  echo "================================="

  sysctl --system > /dev/null
  systemctl daemon-reload
  systemctl enable "backup-repo@pkgbuild.service"
  systemctl enable "docker.service"
  systemctl_enable_start "system" "getty@tty1.service"
  systemctl_enable_start "system" "macchiato.service"
  systemctl_enable_start "system" "fstrim.timer"
  systemctl_enable_start "system" "NetworkManager.service"
  systemctl_enable_start "system" "NetworkManager-dispatcher.service"
  systemctl_enable_start "system" "ModemManager.service"
  systemctl_enable_start "system" "kresd.socket"
  systemctl_enable_start "system" "kresd@1.service"
  systemctl_enable_start "system" "iwd.service"
  systemctl_enable_start "system" "linux-modules-cleanup.service"
  systemctl_enable_start "system" "systemd-resolved"
  systemctl_enable_start "system" "bluetooth.service"
  systemctl_enable_start "system" "paccache.timer"
  systemctl_enable_start "system" "ufw.service"
  systemctl_enable_start "system" "snapper-cleanup.timer"
  systemctl_enable_start "system" "auditd.service"
  systemctl_enable_start "system" "vnstat.service"
  systemctl_enable_start "system" "usbguard.service"
  systemctl_enable_start "system" "usbguard-dbus.service"
  systemctl_enable_start "system" "tlp.service"
  systemctl_enable_start "system" "tlp-sleep.service"
  systemctl_enable_start "system" "systemd-swap.service"

  if [ -d "$HOME/.ccnet" ]; then
    systemctl_enable_start "system" "seaf-cli@cyril.service"
  else
    >&2 echo "=== Seafile is not initialized, skipping..."
  fi

  if is_chroot; then
    >&2 echo "=== Running in chroot, skipping private dotiles configuration..."
  else
        if [ ! -d "$HOME/.dotfiles-private" ]; then
            git clone ssh://git@git.levis.ws:10022/cyril/dotfiles-private.git ~/.dotfiles-private
            ~/.dotfiles-private/setup
        fi
  fi

  echo ""
  echo "=============================="
  echo "Setting dash as /usr/bin/sh..."
  echo "=============================="
  ln -sfT dash /usr/bin/sh
  echo "Done"

  echo ""
  echo "==============================="
  echo "Creating top level Trash dir..."
  echo "==============================="
  mkdir --parent /.Trash
  chmod a+rw /.Trash
  chmod +t /.Trash
  echo "Done"

  echo ""
  echo "======================================="
  echo "Finishing various user configuration..."
  echo "======================================="

  echo "Configuring aurutils"
  ln -sf /etc/pacman.conf /usr/share/devtools/pacman-aur.conf
  ln -sf /usr/bin/archbuild /usr/local/bin/aur-x86_64-build

  echo "Force dns config"
  ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf

  echo "Configuring fontconfig"
  ln -sf /etc/fonts/conf.avail/75-joypixels.conf /etc/fonts/conf.d/75-joypixels.conf

  if is_chroot; then
      >&2 echo "=== Running in chroot, skipping firewall and udev setup..."
  else
      ufw --force reset > /dev/null
      ufw default allow outgoing
      ufw default deny incoming
      ufw allow ssh
      ufw allow 5000
      ufw enable
      find /etc/ufw -type f -name '*.rules.*' -delete

      echo "Reload udev rules"
      udevadm control --reload
      udevadm trigger
  fi

fi
