#!/usr/bin/env python2
from __future__ import division
from hashlib import md5
from sys import argv

# preselected suitable (vibrant enough) colours with a fair sample
x256_colours = [
    2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 34, 37, 40, 43, 46, 49, 76, 78, 80,
    82, 84, 86, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219,
    221, 223, 225, 227, 229
]


def deterministic_x256(*args):
    '''Produces a weighted deterministic colour'''
    seed = unicode(args)

    m = md5()
    m.update(seed)
    digest = m.hexdigest()

    index = int(digest, 16) % len(x256_colours)

    return x256_colours[index]


def wrap(string, colour):
    return '\033[38;5;%sm%s\033[0m' % (colour, string)


def colourise(string):
    colour = deterministic_x256(string)
    return wrap(string, colour)


if len(argv) <= 1:
    for c in x256_colours:
        print wrap(c, c)
else:
    print deterministic_x256(*argv[1:])
