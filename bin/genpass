#!/usr/bin/python3
"""Little password generator, with very small amount of features, but funny ones:

usage:
    genpass.py   # yield four lines
    genpass.py <alphabet> [+<char to add>] [-<char to remove>]

exemple:
    genpass.py
    genpass.py numeric +@
    genpass.py numeric -0 +0  # 0 included ; last is right
    genpass.py ascii +‚ÑÇ‚Ñï‚Ñö‚Ñù‚Ñ§
    genpass.py ascii -a +‚ÑÇ‚Ñï‚Ñö‚Ñù‚Ñ§ -a +a  # a included ; last is right
    genpass.py numeric ++
    genpass.py numeric +-
    genpass.py ascii --+
    genpass.py unicode
    genpass.py any_unicode


- output 4 lines, each having its own properties:
    - numeric
    - ascii alphanum
    - full ascii
    - unicode
- use SystemRandom, which is non-predictible/reproductible

the unicode is based on [Markus Kuhn‚Äôs UTF-8 decoder stress test](https://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html)
found at https://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html,
plus some alphabets found at [unicode-table](http://unicode-table.com/en/):
old-italic, tibetan, russian, arab, braille

Some of them are filtered because all characters have not a width of 1.
(it's the reason why many asian characters are not present)

"""

import sys
import shutil
from random import SystemRandom as Random
from itertools import islice


ALPHABETS = {
    'numeric': '0123456789',
    'alphanum': '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',
    'ascii': """!"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~""",
    'unicode': """!"&'()+,-./0123456789:;<=>@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]`abcdefghijklmnopqrstuvwxyz|¬£¬©¬¨¬¥¬µ√Ä√Ü√ñ√û√ü√¶√©√∞√∂√º√øƒ±≈ì≈†≈∏≈æ…ê…ë…î…ô…õ É ä è ≥ÀàÀêŒá‡πè‡ΩÄ‡ΩÅ‡ΩÇ‡ΩÑ‡ΩÖ‡ΩÜ‡Ωá‡Ωâ‡Ωè‡Ωê‡Ωë‡Ωì‡Ωî‡Ωï‡Ωñ‡Ωò‡Ωô‡Ωö‡Ωõ‡Ωù‡Ωû‡Ωü‡Ω†‡Ω°‡Ω¢‡Ω£‡Ω§‡Ω¶‡Ωß‡Ω®‡Ω©‡Ω™‡Ω´‡Ω¨·Éê·Éë·Éí·Éì·Éî·Éï·Éñ·Éó·Éò·Éô·Éö·Éõ·Éú·Éù·Éû·É†·É°·É¢·É£·É§·É•·Éß·É®·É™·É¨·ÉÆ·É∞·àÄ·àÑ·àÖ·àÜ·àà·àã·àå·àç·àé·àï·àò·àô·àõ·àù·àû·à•·à®·à©·à™·à´·à≠·àÆ·à∞·à≤·à≥·àµ·à∂·àΩ·âÄ·âÅ·âÖ·âÜ·â†·â¢·â£·â§·â•·â∞·â±·â≥·â¥·âµ·äê·äì·äï·äù·ä†·ä•·ä®·ä´·ä≠·ãà·ãã·ãç·ãì·ãï·ãò·ãú·ãû·ã®·ã©·ã´·ã≠·ã∞·ã≥·ãµ·åÑ·åÖ·åà·åâ·åã·åå·åç·åé·å†·å£·å•·å®·çà·çâ·çã·çç·ç¢·ç•·ö¢·ö¶·ö©·ö™·ö´·ö±·ö≥·öπ·öª·öæ·õÅ·õè·õí·õñ·õó·õö·õû·õ•·∏Ç·∫Ñ·ºÄ·ºÅ·ºÑ·ºê·ºî·º†·º°·º¢·ºß·º∞·º±·º∂·ΩÄ·ΩÅ·ΩÉ·ΩÑ·ΩÖ·Ωê·Ωë·Ωì·Ωñ·Ω•·Ω¶·Ω∞·Ω±·Ω≤·Ω≥·Ω¥·Ωµ·Ω∂·Ω∑·Ω∏·Ωπ·Ω∫·Ωª·Ωº·ΩΩ·æø·øÉ·øÜ·øá·øñ·ø¶·ø∂·øΩ·øæ‚Äì‚Äî‚Äò‚Äô‚Äö‚Äú‚Äù‚Äû‚Ä†‚Ä°‚Ä¢‚Ä¶‚Ä∞‚Äæ‚ÇÄ‚ÇÇ‚Ç¨‚ÑÇ‚Ñï‚Ñö‚Ñù‚Ñ¢‚Ñ§‚Üê‚Üë‚Üí‚Üó‚Ü®‚Üª‚áå‚áí‚áî‚á£‚àÄ‚àÇ‚àÜ‚àá‚àà‚àè‚àë‚àí‚àû‚àß‚à®‚à™‚àÆ‚â†‚â°‚â§‚â™‚äÇ‚äÉ‚äÜ‚ä§‚ä•‚ãÖ‚åÄ‚åà‚åâ‚åä‚åã‚å∑‚çé‚çï‚ç≥‚ç¥‚ëÄ‚îÄ‚îÅ‚îÇ‚îÉ‚îÑ‚îÖ‚îÜ‚îá‚îä‚îã‚îå‚îç‚îé‚îè‚îê‚îë‚îí‚îì‚îî‚îï‚îñ‚îó‚îò‚îô‚îö‚îõ‚îú‚îù‚î†‚î£‚î§‚î•‚î®‚î´‚î¨‚îØ‚î∞‚î≥‚î¥‚î∑‚î∏‚îª‚îº‚îø‚ïÄ‚ïÅ‚ïÇ‚ïÉ‚ïÑ‚ïÖ‚ïÜ‚ïã‚ïå‚ïç‚ïé‚ïè‚ïê‚ïë‚ïí‚ïì‚ïî‚ïï‚ïñ‚ïó‚ïò‚ïô‚ïö‚ïõ‚ïú‚ïù‚ïû‚ïü‚ï†‚ï°‚ï¢‚ï£‚ï§‚ï•‚ï¶‚ïß‚ï®‚ï©‚ï™‚ï´‚ï≠‚ïÆ‚ïØ‚ï∞‚ï±‚ï≤‚ï≥‚ï¥‚ïµ‚ï∂‚ï∑‚ï∏‚ïπ‚ï∫‚ïª‚ïº‚ïΩ‚ïæ‚ïø‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà‚ñâ‚ñä‚ñã‚ñå‚ñç‚ñé‚ñè‚ñë‚ñí‚ñì‚ñ∫‚ò∫‚ôÄ‚†Å‚†Ç‚†É‚†Ñ‚†Ö‚†Ü‚†á‚†à‚†â‚†ä‚†ã‚†å‚†ç‚†é‚†è‚†ê‚†ë‚†í‚†ì‚†î‚†ï‚†ñ‚†ó‚†ò‚†ô‚†ö‚†õ‚†ú‚†ù‚†û‚†ü‚††‚†°‚†¢‚†£‚†§‚†•‚†¶‚†ß‚†®‚†©‚†™‚†´‚†¨‚†≠‚†Æ‚†Ø‚†∞‚†±‚†≤‚†≥‚†¥‚†µ‚†∂‚†∑‚†∏‚†π‚†∫‚†ª‚†º‚†Ω‚†æ‚†ø‚°Ä‚°Å‚°Ç‚°É‚°Ñ‚°Ö‚°Ü‚°á‚°à‚°â‚°ä‚°ã‚°å‚°ç‚°é‚°è‚°ê‚°ë‚°í‚°ì‚°î‚°ï‚°ñ‚°ó‚°ò‚°ô‚°ö‚°õ‚°ú‚°ù‚°û‚°ü‚°†‚°°‚°¢‚°£‚°§‚°•‚°¶‚°ß‚°®‚°©‚°™‚°´‚°¨‚°≠‚°Æ‚°Ø‚°∞‚°±‚°≤‚°≥‚°¥‚°µ‚°∂‚°∑‚°∏‚°π‚°∫‚°ª‚°º‚°Ω‚°æ‚°ø‚¢Ä‚¢Å‚¢Ç‚¢É‚¢Ñ‚¢Ö‚¢Ü‚¢á‚¢à‚¢â‚¢ä‚¢ã‚¢å‚¢ç‚¢é‚¢è‚¢ê‚¢ë‚¢í‚¢ì‚¢î‚¢ï‚¢ñ‚¢ó‚¢ò‚¢ô‚¢ö‚¢õ‚¢ú‚¢ù‚¢û‚¢ü‚¢†‚¢°‚¢¢‚¢£‚¢§‚¢•‚¢¶‚¢ß‚¢®‚¢©‚¢™‚¢´‚¢¨‚¢≠‚¢Æ‚¢Ø‚¢∞‚¢±‚¢≤‚¢≥‚¢¥‚¢µ‚¢∂‚¢∑‚¢∏‚¢π‚¢∫‚¢ª‚¢º‚¢Ω‚¢æ‚¢ø‚£Ä‚£Å‚£Ç‚£É‚£Ñ‚£Ö‚£Ü‚£á‚£à‚£â‚£ä‚£ã‚£å‚£ç‚£é‚£è‚£ê‚£ë‚£í‚£ì‚£î‚£ï‚£ñ‚£ó‚£ò‚£ô‚£ö‚£õ‚£ú‚£ù‚£û‚£ü‚£†‚£°‚£¢‚££‚£§‚£•‚£¶‚£ß‚£®‚£©‚£™‚£´‚£¨‚£≠‚£Æ‚£Ø‚£∞‚£±‚£≤‚£≥‚£¥‚£µ‚£∂‚£∑‚£∏‚£π‚£∫‚£ª‚£º‚£Ω‚£æ‚¥∞‚¥±‚¥≤‚¥≥‚¥¥‚¥µ‚¥∂‚¥∑‚¥∏‚¥π‚¥∫‚¥ª‚¥º‚¥Ω‚¥æ‚¥ø‚µÄ‚µÅ‚µÇ‚µÉ‚µÑ‚µÖ‚µÜ‚µá‚µà‚µâ‚µä‚µã‚µå‚µç‚µé‚µè‚µê‚µë‚µí‚µì‚µî‚µï‚µñ‚µó‚µò‚µô‚µö‚µõ‚µú‚µù‚µû‚µü‚µ†‚µ°‚µ¢‚µ£‚µ§‚µ•Ô¨ÅÔ∫çÔ∫éÔ∫èÔ∫êÔ∫ëÔ∫íÔ∫ïÔ∫ñÔ∫óÔ∫òÔ∫ôÔ∫öÔ∫õÔ∫úÔ∫ùÔ∫ûÔ∫üÔ∫†Ô∫°Ô∫¢Ô∫£Ô∫§Ô∫•Ô∫¶Ô∫ßÔ∫®Ô∫©Ô∫™Ô∫´Ô∫¨Ô∫≠Ô∫ÆÔ∫ØÔ∫∞Ô∫±Ô∫≤Ô∫≥Ô∫¥Ô∫µÔ∫∂Ô∫∑Ô∫∏Ô∫πÔ∫∫Ô∫ªÔ∫ºÔ∫ΩÔ∫æÔ∫øÔªÄÔªÅÔªÇÔªÉÔªÑÔªÖÔªÜÔªáÔªàÔªâÔªäÔªãÔªåÔªçÔªéÔªèÔªêÔªëÔªíÔªìÔªîÔªïÔªñÔªóÔªòÔªôÔªöÔªõÔªúÔªùÔªûÔªüÔª†Ôª°Ôª¢Ôª£Ôª§Ôª•Ôª¶ÔªßÔª®Ôª©Ôª™Ôª´Ôª¨Ôª≠ÔªÆÔª±Ôª≤Ôª≥Ôª¥ÔøΩêåÄêåÅêåÇêåÉêåÑêåÖêåÜêåáêåàêåâêåäêåãêååêåçêåéêåèêåêêåëêåíêåìêåîêåïêåñêåóêåòêåôêåöêåõêåúêåùêåûêå†êå°êå¢êå£""",
}


def validate(char:str) -> bool:
    return char.isprintable() and not char.isspace()

def password(size:int, alphabet:str) -> str:
    return ''.join(islice(gen_from(alphabet), 0, size))

def gen_from(alphabet:str) -> iter:
    random = Random()
    while True:
        yield random.choice(alphabet)


if __name__ == "__main__":
    if len(sys.argv) == 1:  # no CLI parameter
        print('\n'.join(
            password(shutil.get_terminal_size().columns, alphabet)
            for alphabet in ALPHABETS.values()
        ))
    else:  # parse CLI, output only one line
        # constraints
        if sys.argv[1] not in ALPHABETS:
            print('first arg should be in {}'.format(ALPHABETS.keys()))
        alphabet = set(ALPHABETS[sys.argv[1]])
        bonus, malus = '', ''
        for mod in sys.argv[2:]:
            if mod.startswith('+'):
                alphabet |= set(mod[1:])
            elif mod.startswith('-'):
                alphabet -= set(mod[1:])
            else:
                print("One parameter doesn't start with a + or a -."
                      " Will be ignored.")
        print(password(shutil.get_terminal_size().columns, tuple(alphabet)))

