#!/bin/sh

# Alrighty, here's how this monstrosity works:
# If we're called as something other than qutebrowser-container (symlink), then we take the container name from that.
# Otherwise, we take it from a bemenu selection of all our container dirs
#
# If we don't have a container selection, we ain't doin anything
#
# Try to open it using the existing process, but if we can't, fall back to just running it.
#   When just running a private container, spawn a new process that waits for it to exit then cleans up
#     This prevents things like tuir from waiting for this script to exit
#   If we ran the existing process for a private container, we can assume something else will clean up the mess.
#
# This is why i'm doing private tabs as a dedicated container path, rather than a temp-basedir.
# This allows me to open as many links as I want (like from tuir) just by invoking qutebrowser-private <URL>
#

if [ -x /usr/local/bin/qutebrowser ]; then
    QUTE=/usr/local/bin/qutebrowser
elif [ -x /bin/qutebrowser ]; then
    QUTE=/bin/qutebrowser
elif [ -x /usr/bin/qutebrowser ]; then
    QUTE=/usr/bin/qutebrowser
else
    echo "UNABLE TO FIND TRUE QUTEBROWSER"
    exit 1
fi
echo $QUTE
ARGS=$@

if [ "$(basename "$0")" = "qutebrowser-container" ]; then
    # The extra seds are so I have nice Pascal Case names to select from.
    container=$(
        find ~/.local/share/qutebrowser-containers/ -maxdepth 1 -type d -printf "%f\n" |
            tail -n +2 | # Ignore . and ..
            sed -e 's/\b\(.\)/\u\1/g' |
            sort |
            dmenu --prompt "Container:" |
            sed -e 's/\b\(.\)/\l\1/g' # Lowercase it
    )
else
    container=$(basename "$0" | cut -d- -f2)
    mkdir -p "$HOME/.local/share/qutebrowser-containers/$container"
fi

if [ -z "$container" ]; then
    exit
fi

if [ -z "$1" ]; then
    url="duckduckgo.com"
else
    url="$1"
fi

qbVersion='1.0.4'
protoVersion=1

if [ -n "$container" ]; then
    ipcDir="$HOME/.local/share/qutebrowser-containers/$container/runtime"
else
    ipcDir="${XDG_RUNTIME_DIR}/qutebrowser"
fi

echo Checking "$ipcDir"
ipcSocket="$(find "$ipcDir" -type s)"
echo For IPC file "$ipcSocket"

baseDir=$HOME/.local/share/qutebrowser-containers/$container

openUrl() {
    printf \
        '{"args": ["%s"], "target_arg": null, "version": "%s", "protocol_version": %d, "cwd": "%s"}\n' \
        "${url}" "${qbVersion}" "${protoVersion}" "${PWD}" |
        socat - UNIX-CONNECT:"${ipcSocket}"
    return $?
}

if [ -n "$ipcSocket" ] && openUrl; then # we can (and did) open it in an existing window
    exit
elif [ "$container" = private ]; then # we need to make a new private instance
    # Extra insurance in case the system shut down without allowing the baseDir to be removed.
    rm -rf "${baseDir:?}/*"

    mkdir "$baseDir"

    setsid sh -c "
    QUTE_CONTAINER=private nohup $QUTE \
      --basedir $baseDir \
      --config-py "$HOME/.config/qutebrowser/config.py" \
      $ARGS \
      >/dev/null \
    && rm -rf $baseDir/*" &
else # we need to make a new normal container
    export QUTE_CONTAINER=$container
    setsid $QUTE --basedir "$baseDir" --config-py "$HOME/.config/qutebrowser/config.py" $ARGS &
fi
