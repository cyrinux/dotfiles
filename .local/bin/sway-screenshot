#!/usr/bin/env bash
# use "q" to quit swappy, if not, file not save
# as edited.png
set -ueo pipefail

mkdir -p /tmp/screenshots
cd /tmp/screenshots || exit 1

systemctl --user stop sway-inactive-window-transparency.service

case ${1:-monitor} in
	window)
		window="$(swaymsg -t get_tree | jq '.. | select(type == "object") | select(.focused)')"
		x="$(jq .rect.x <<< "$window")"
		y="$(jq .rect.y <<< "$window")"
		width="$(jq .rect.width <<< "$window")"
		height="$(jq .rect.height <<< "$window")"
		output="${x},${y} ${width}x${height}"
		grim -g "$output" -t png area.png
		;;
	monitor | selection)
		output=$(swaymsg -t get_outputs | jq -r '.[] | select(.focused)' | jq -r '.name')
		grim -o "$output" -t png screen.png
		geometry="$(slurp -b '#AFAFAFAF' -c '#FF3F3FAF' -s '#00000000' -w 3 -d -o)"

		vimiv -f -s statusbar.show false screen.png &

		if [ -n "$geometry" ]; then
			grim -g "$geometry" -t png area.png
		else
			grim -t png area.png
		fi

		kill $!
		;;
	*)
		printf "Usage: %s [ monitor | window | selection ]" "$0"
		exit 0
		;;
esac

systemctl --user start sway-inactive-window-transparency.service

[ -f area.png ] && swappy -f area.png -o edited.png &&
	convert edited.png \
		\( +clone -alpha extract \
		-draw 'fill black polygon 0,0 0,15 15,0 fill white circle 15,15 15,0' \
		\( +clone -flip \) -compose Multiply -composite \
		\( +clone -flop \) -compose Multiply -composite \
		\) -alpha off -compose CopyOpacity -composite rounded.png &&
	wl-copy < rounded.png

rm -f screen.png area.png rounded.png edited.png
